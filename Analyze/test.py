import numpy as np
# 最小最大归一化矩阵到[0,1]
def Min_Max_Norm(matrix):
    # Min-Max normalization
    min_val = np.min(matrix)
    max_val = np.max(matrix)
    normalized_matrix = (matrix - min_val) / (max_val - min_val)
    return normalized_matrix


node_index = [2, 4, 6, 7, 11, 15, 16, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 44, 45, 52, 53, 54, 56, 58, 65, 67, 68, 69, 73, 80, 81, 85, 89, 90, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 116, 118, 119, 126, 127, 128, 130, 132, 139, 141, 142, 147]
node_weight = [0.8545643303425922, 0.1442527515795393, 0.17117247389964554, 0.3391257175422132, 0.3738676334412671, 0.3525238257459481, 0.16937968586452326, 0.7759208934700811, 0.3284923363836528, 0.7413955355402647, 0.45764814382103547, 0.3538270176482066, 0.41079441267990496, 0.9680071594305228, 0.23720553962788488, 0.3343565646738217, 0.2856218248819849, 0.4480275343408104, 0.14987660156335547, 0.30679502443444523, 0.16190660865388476, 0.2640020831435201, 0.9307927659463068, 0.8062595883276784, 0.4356189463327665, 0.5380455565665159, 0.6315794753450175, 0.4891569312707981, 0.543616304112317, 0.16025529590588633, 0.37198489486303454, 0.46926876801748074, 0.3133104719671893, 0.27209325496472936, 0.8678697207184505, 0.4188509897088933, 0.7984797267568189, 0.5255087756364176, 0.45633536722620116, 0.6165476523480479, 0.7188323863515735, 0.34560551760939345, 0.3640638856463129, 0.3597837811600703, 0.9867944893566978, 0.4520636802151584, 0.27627098031225694, 0.29471859705305953, 0.3732061290622933, 0.40564293213550895, 0.9814972629421294, 0.808911831942723, 0.5011733968910698, 0.4196133748839729, 0.7231361777530062, 0.6453075373155458]
# print(node_index[:20])  20个区域特征对比实验

node = [51, 116, 130, 57, 42, 27, 56, 76, 131, 93, 125, 2, 132, 58, 133, 95, 19, 59, 21, 142, 101, 147, 68, 100, 135, 129, 73, 67, 96, 88, 134, 139, 69, 85, 60, 22, 99, 143, 118, 44, 86, 65, 141, 94, 26, 38, 128, 137, 110, 11, 127, 81, 103, 46, 114, 104, 25, 15, 102, 7, 120, 29, 123, 20, 145, 89, 52, 115, 14, 112, 40, 126, 50, 108, 84, 30, 43, 119, 124, 90, 78, 54, 144, 77, 91, 62, 105, 28, 3, 31, 138, 72, 121, 106, 61, 49, 32, 111, 12, 34, 36, 136, 37, 97, 79, 146, 13, 70, 23, 6, 16, 92, 83, 10, 24, 53, 98, 80, 45, 66, 148, 63, 4, 109, 122, 117, 35, 113, 1, 82, 71, 8, 87, 18, 140, 48, 55, 75, 64, 5, 47, 17, 107, 39, 74, 9, 33, 41]
Selected = node[0:56]
# print(Selected[:20])
print("###选出的前56： ", sorted(Selected))
intersection = set(node_index).intersection(set(Selected))
'''
select_weight = [0.8545643303425922, 0.3738676334412671, 0.7759208934700811, 0.7413955355402647, 0.45764814382103547, 0.41079441267990496, 0.9680071594305228, 0.40692397564760274, 0.9717862460704427, 0.4480275343408104, 0.36322192722890106, 1.0, 0.9307927659463068, 0.9747787776453807, 0.8062595883276784, 0.7754331111186195, 0.46461612710237293, 0.4356189463327665, 0.5380455565665159, 0.6315794753450175, 0.4891569312707981, 0.543616304112317, 0.912885944093315, 0.37198489486303454, 0.46926876801748074, 0.44446705945079945, 0.5107738204689841, 0.8678697207184505, 0.4188509897088933, 0.7984797267568189, 0.5255087756364176, 0.45633536722620116, 0.6165476523480479, 0.7188323863515735, 0.3640638856463129, 0.3597837811600703, 0.38892243163443396, 0.3628412652987894, 0.9867944893566978, 0.4520636802151584, 0.8615818506539313, 0.3732061290622933, 0.40564293213550895, 0.5447368846351303, 0.9814972629421294, 0.9088637466232586, 0.808911831942723, 0.8027642242926524, 0.5023840962217965, 0.603037307793937, 0.39868809229961555, 0.5011733968910698, 0.4196133748839729, 0.7231361777530062, 0.4555119980990426, 0.6453075373155458]
all_weight = [71.14882130234994, 127.22394193661019, 79.3423270415831, 72.39149719429889, 66.50549008512945, 74.4695629765941, 87.43470000471383, 70.29455837768369, 63.7046615310586, 73.77215886193272, 90.11659938624196, 77.93279801859363, 75.09733434029084, 84.4493680858735, 88.46896588140436, 74.33116884955241, 65.31707193745615, 70.18829618095083, 121.1530682023445, 86.61385700815725, 118.48788599569673, 96.5840290934715, 74.66168823803994, 73.76903645306022, 88.56956567465798, 92.96715911615672, 135.98115193198663, 79.56698013261784, 87.0665456356423, 83.30447134801729, 79.27901202431758, 78.32143791980043, 61.41092872843854, 77.15729428507528, 71.3237416258729, 76.81722620363792, 76.17047462846485, 92.6683810431991, 64.55112799596277, 84.07515515149312, 61.25591772974114, 136.27287821880947, 83.1725885933638, 95.84136692452526, 72.82562983791094, 89.29480495815596, 66.31912067899255, 69.36810804968438, 78.69283117729356, 83.95835469636884, 138.4508366662976, 84.938934771097, 73.75428526007055, 81.63553713708721, 69.16026286005948, 133.10838984369946, 136.50388645115189, 123.49506129251765, 121.11541388326474, 97.12192199802563, 78.81253430815961, 79.91399750786127, 72.50812079234457, 66.96477379976673, 94.88348697912718, 72.79672001234006, 102.79030085306773, 110.01064413099262, 99.01634738644512, 75.0559730896156, 70.6396543372339, 79.01938724698316, 103.22033425828187, 63.89065968572063, 68.34256510951563, 131.7260741823464, 80.16542708723902, 82.14313813594754, 75.63929365131303, 73.6268123063499, 89.97126153431657, 70.71638103455322, 73.93513621496571, 83.62662901992591, 97.48108223630828, 95.56651635401522, 70.23995631839264, 100.6850613957596, 85.44189421522256, 82.26013448992721, 79.95065793318372, 74.0314897367569, 128.2510504680938, 93.5890859268156, 122.89449550921752, 101.82252506544343, 75.68216590987885, 73.65200038274628, 96.48268941065146, 108.85026377327289, 116.74612552312229, 87.9349076456249, 89.35979986993603, 89.02939755108054, 79.8380037887957, 78.82889068138182, 65.14017102568143, 83.74273457516317, 72.35685333633734, 91.27875331236969, 78.16101298595358, 84.32840973330795, 71.28667799497983, 89.26541979131876, 84.69329583404674, 137.43143834267204, 71.55857895396463, 96.15293687811167, 82.5826336594688, 87.2565741590076, 78.9527613113358, 71.96960248352202, 86.80577873935636, 82.44141004597276, 127.76565884817965, 84.00669593834772, 90.0655346093309, 92.56949099312882, 103.30683738090232, 137.02251937901084, 131.41558097469857, 123.69980102338101, 123.22523694918006, 100.0374173125979, 107.80733382061335, 76.36568035093977, 92.0326126957803, 79.05383794143818, 99.9439574759059, 69.73001432178586, 93.6479381886043, 117.07835635147573, 96.41912949762559, 81.05106252613304, 86.21528934469127, 75.54409188373859, 111.07038076196358, 72.71805451089222]
all_weight = Min_Max_Norm(all_weight)   # 做归一化，要不可视化的时候差异太小了
print(list(all_weight))
for i, w in enumerate(all_weight):
    print(i+1, ":", w, ",", sep="")
'''
print("###和Scale-1交集： ", sorted(intersection))
print(len(sorted(intersection)))

weight_select_01 = [1 for i in range(1, 57)]
print(weight_select_01)
Selected = sorted(Selected)
for i in range(0, 56):
    if Selected[i] in intersection:
        weight_select_01[i] = 2
print(weight_select_01)


non_intersection_Scale_1 = []
for a in node_index:
    for b in Selected:
        if a not in Selected:
            non_intersection_Scale_1.append(a)
non_intersection_Scale_1 = list(set(non_intersection_Scale_1))
print("###Scale-1中非交集： ", non_intersection_Scale_1)
print(len(non_intersection_Scale_1))

non_intersection_Selected = []
for a in Selected:
    for b in node_index:
        if a not in node_index:
            non_intersection_Selected.append(a)
non_intersection_Selected = list(set(non_intersection_Selected))
print("###Selected中非交集： ", sorted(non_intersection_Selected))
print(len(non_intersection_Selected))


'''
import matplotlib.pyplot as plt

# 给定的SSIM值
ssim_values = [0.13146791608447445, 0.13113771204460092, 0.15665651909293016]  # 这里使用实际的SSIM值列表

# 计算平均SSIM值
average_ssim = sum(ssim_values) / len(ssim_values)
print("平均SSIM:", average_ssim)

# 绘制折线图
plt.plot(ssim_values, marker='o', linestyle='-')
plt.axhline(y=average_ssim, color='r', linestyle='--', label='avg SSIM')
plt.xlabel('no')
plt.ylabel('SSIM')
plt.title('SSIM distribution & average')
plt.legend()
plt.grid(True)
plt.show()
'''
